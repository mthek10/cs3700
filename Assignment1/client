#!/usr/bin/env python3

import socket
import sys
import argparse
import ssl

# defined to use -s conditionals

# Setup Argument Parser
parser = argparse.ArgumentParser(description='Process argument flags')
parser.add_argument('-p', action="store",dest="port",type=int, default=27993)
# saves the name of program positionally because ./client is first arg in argv
parser.add_argument('name_program',action="store")
parser.add_argument('host_ip', action="store",type=str)
parser.add_argument('neu_id', action="store", type=str)
# defaults to false b/c EC
parser.add_argument('-s', action="store_true", default=False, dest='ssl_flag')

args = parser.parse_args(sys.argv)

# create socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
if args.ssl_flag:
  print('trying ssl \n')
  s = ssl.wrap_socket(s)
  if args.port == 27993:
    args.port = 27994

tup1 = (args.host_ip, args.port)

## Connect to socket
s.connect(tup1)

## Send Hello message
m1 = 'cs3700spring2020 HELLO ' + args.neu_id + '\n'
s.sendall(m1.encode('ascii'))

from_server = ''
continue_recv = True
find_continue_recv = True

while find_continue_recv:
  ##### GET SERVER MESSAGE ######
  while continue_recv:
    ## Receive bytes
    curMessage = s.recv(8192)
    from_server += curMessage.decode('ascii')
    newline_count = from_server.count("\n", 0, len(from_server))
    if newline_count > 0:
      continue_recv = False

  # If server responds with another find message reply with count
  find_count = from_server.count("FIND",0,len(from_server)) 
  if find_count > 0:
    ##### SEND COUNT MESSAGE ######
    key = from_server[22]
    key_count = from_server.count(key, 23, len(from_server))
    m2 = 'cs3700spring2020 COUNT ' + str(key_count) + '\n'
    s.sendall(m2.encode('ascii'))
    m2 = ''
    m1 = ''
    from_server = ''
    continue_recv = True
  # If server responds with BYE message print secret key
  else: 
    bye_count = from_server.count("BYE",0,len(from_server))
    if  bye_count > 0:
      if from_server.split(' ')[2] == 'Unknown_Husky_ID':
        print("Unknown_Husky_ID")
      else:
        print(from_server.split(' ')[2].replace('\n',''))
      find_continue_recv = False;

## Close socket
s.close()
