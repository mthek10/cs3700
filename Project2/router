#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket
import ipaddress

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, networks):
    self.asn = networks.pop(0)
    self.routes = {} #forwarding table [ip: list of content of update packets]
    self.updates = {} #store announcements [ip: list of update packets]
    self.relations = {} #cust, peer, etc. [ip: relationship to us]
    self.sockets = {}
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def convert_ip_to_bin(self, ip):
    octets = ip.split('.')
    ipbin = ''
    for bit in octets:
      ipbin += format(int(bit), '08b')

    return ipbin

  def is_possible_route(self, ip, network, netmask):

    netobj = ipaddress.ip_network(network + "/" + netmask)
    prefixlength = netobj.prefixlen

    netbin = self.convert_ip_to_bin(network)
    ipbin = self.convert_ip_to_bin(ip)

    matching_bits = 0
    for bit in range(0, prefixlength):
      if netbin[bit] == ipbin[bit]:
        matching_bits += 1
      else:
        break

    return matching_bits == prefixlength

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    # TODO
    outroutes = []

    for ip in self.routes:
      for route in self.routes[ip]:
        network = route[NTWK]
        netmask = route[NMSK]
        if self.is_possible_route(daddr, network, netmask) and not(ip in outroutes):
          outroutes.append(ip)
    return outroutes

  def get_shortest_as_path(self, pos_routes):
    """ select the route with the shortest AS Path """
    # Max size of route below
    size = 999;
    outroutes = []

    for route in pos_routes:
      for route_info in self.routes[route[0]]:
        if route[1] == route_info[NTWK] and route[2] == route_info[NMSK] and len(route_info[APTH]) < size:
          size = len(route_info[APTH])

    for route in pos_routes:
      for route_info in self.routes[route[0]]:
        if route[1] == route_info[NTWK] and route[2] == route_info[NMSK] and len(route_info[APTH]) == size:
          outroutes.append(route)

    return outroutes

  def get_highest_preference(self, pos_routes):
    """ select the route with highest preference """
    #pos_routes is list of tuples so [(router ip, network, netmask), (router ip, network, netmask),...]
    #tuple structure is (router ip, network, netmask)
    # routes is all possible routes to daddr
    outroutes = []
    highest = 0

    for route in pos_routes:
      routerip = route[0]
      network = route[1]
      netmask = route[2]
      for route_info in self.routes[routerip]:
        if network == route_info[NTWK] and netmask == route_info[NMSK] and route_info[LPRF] > highest:
          highest = route_info[LPRF]

    for route in pos_routes:
      routerip = route[0]
      network = route[1]
      netmask = route[2]
      for route_info in self.routes[routerip]:
        if network == route_info[NTWK] and netmask == route_info[NMSK] and route_info[LPRF] == highest:
          outroutes.append(route)

    return outroutes

  def get_self_origin(self, pos_routes):
    """ select self originating routes """
    # TODO
    outroutes = []

    for route in pos_routes:
      for route_info in self.routes[route[0]]:
        if route[1] == route_info[NTWK] and route[2] == route_info[NMSK] and route_info[SORG]:
          outroutes.append(route)

    if not outroutes:  #self origin was false for everyone
      return pos_routes

    return outroutes

  def get_origin_routes(self, pos_routes):
    """ select origin routes:  IGP > EGP > UNK """
    # TODO
    outroutes = []

    for route in pos_routes:
      for route_info in self.routes[route[0]]:
        if route[1] == route_info[NTWK] and route[2] == route_info[NMSK] and route_info[ORIG] == "IGP":
          outroutes.append(route)

    if len(outroutes) == 0:
      for route in pos_routes:
        for route_info in self.routes[route[0]]:
          if route[1] == route_info[NTWK] and route[2] == route_info[NMSK] and route_info[ORIG] == "EGP":
            outroutes.append(route)

    # If no IGP nor EGP were found return rest of routes bc UNK
    if len(outroutes) == 0:
      return pos_routes

    return outroutes

  def filter_relationships(self, srcip, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []

    # if route is from a customer then add all routes
    if self.relations[srcip] == CUST:
      outroutes = routes
    # if route is not from customer but is going to a customer add that route
    else:
      for route in routes:
        if self.relations[route[0]] == CUST:
          outroutes.append(route)

    return outroutes

  def get_longest_prefix_match(self, daddr):
    longest_matches = []
    longest_matches2 = []

    longest_match = 0
    for router_ip in self.routes: #ips
      for route in self.routes[router_ip]:
        network = route[NTWK]
        netmask = route[NMSK]
        if self.is_possible_route(daddr, network, netmask):
          netobj = ipaddress.ip_network(network + "/" + netmask)
          prefixlength = netobj.prefixlen
          if prefixlength >= longest_match:
            longest_match = prefixlength
            longest_matches.append((router_ip, network, netmask))

    for route in longest_matches: #tuples
      netobj = ipaddress.ip_network(route[1] + "/" + route[2])
      prefixlength = netobj.prefixlen
      if prefixlength == longest_match:
        longest_matches2.append(route)


    return longest_matches2

  def get_lowest_ip(self, pos_routes):
    outroutes = []

    lowestip = '255.255.255.255'
    for route in pos_routes:
      routerip = route[0]
      routeripbin = self.convert_ip_to_bin(routerip)
      lowestipbin = self.convert_ip_to_bin(lowestip)
      for bit in range(0, len(routeripbin)):
        if routeripbin[bit] == '0' and lowestipbin[bit] == '1':
          lowestip = routerip
          break
        elif routeripbin[bit] == '1' and lowestip[bit] == '0':
          break
        else:
          continue

    for route in pos_routes:
      if route[0] == lowestip:
        outroutes.append(route)

    return outroutes

  def get_route(self, srcip, daddr): #destinations add of this packet
    """ Select the best route for a given address """
    # TODO fill in peer?

    #pos_routes is list of tuples
    #determine if there are any routes
    pos_routes = self.get_longest_prefix_match(daddr)

    if not pos_routes: #no possible routes, return None
      return None

    # Rules go here
    if pos_routes:
      # 1. Highest Preference
      pos_routes = self.get_highest_preference(pos_routes)
      # 2. Self Origin
      pos_routes = self.get_self_origin(pos_routes)
      # 3. Shortest ASPath
      pos_routes = self.get_shortest_as_path(pos_routes)
      # 4. EGP > IGP > UNK
      pos_routes = self.get_origin_routes(pos_routes)
      # 5. Lowest IP Address
      pos_routes = self.get_lowest_ip(pos_routes)

      # Final check: enforce peering relationships
      pos_routes = self.filter_relationships(srcip, pos_routes)

    # peer = pos_routes[0][0]


    if not pos_routes: #no possible routes, return None
      return None

    for key in self.sockets.keys():
      if key == pos_routes[0][0]:
        return self.sockets[key]

    return None;

  def forward(self, srcip, packet): #gets entire packet and srcip of that packet
    """ Forward a data packet """
    # get route to send packet
    best_route = self.get_route(srcip, packet[DEST]) #is a socket
    sock = best_route

    if sock == None:
      # dest_ip_port = list(srcip)
      # dest_ip_port[len(srcip) - 1] = '1'
      # packet[SRCE] = ''.join(dest_ip_port)
      # packet[DEST] = srcip
      # packet[TYPE] = NRTE
      # packet[MESG] = {}
      # sock = self.sockets[srcip]
      self.send_error(self.sockets[srcip], packet, srcip)
      return;

    jsonpack = json.dumps(packet)
    sock.sendall(jsonpack.encode())
    # TODO fix src and dest
    return True

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)   
    return False

  def update(self, srcip, packet):
    """ handle update packets """

    # TODO save copy of announcement
    if not(srcip in self.updates.keys()):
      self.updates[srcip] = []

    self.updates[srcip].append(packet) #entire packet


    # add entry to forwarding table
    path = packet[MESG][APTH]
    path.append(self.asn)
    packet[MESG][APTH] = path


    msg = packet[MESG]



    if not(srcip in self.routes):
      self.routes[srcip] = []

    self.routes[srcip].append(msg)

    # decide if send copies of announcement to neighboring routers
    for ip in self.sockets.keys():
      if not(ip == srcip):
        #get the .1 version of the ip i'm sending update to
        #ip i'm sending to is ip
        dest_ip_port = list(ip)
        dest_ip_port[len(ip) - 1] = '1'
        packet['src'] = ''.join(dest_ip_port)
        packet['dst'] = ip

        jsonpack = json.dumps(packet)
        # if receiving message from peer or provider then only send to customer
        if self.relations[srcip] == PEER or self.relations[srcip] == PROV:
          if self.relations[ip] == CUST:
            self.sockets[ip].sendall(jsonpack.encode())
        # if receiving from customer send to all neighbors
        else:
          self.sockets[ip].sendall(jsonpack.encode())
    # TODO
    return True

  def revoke(self, packet):
    """ handle revoke packets """

    srcip = packet[SRCE]
    # add revoke message to updates
    self.updates[srcip].append(packet)  # entire packet

    # remove from routing table
    for rtarget in packet["msg"]:
      for target in self.routes[srcip]:
        if rtarget["network"] == target["network"]:
          if rtarget["netmask"] == target["netmask"]:
            self.routes[srcip].remove(target)

    # check to make sure other targets are available otherwise remove srcip
    if len(self.routes[srcip]) == 0:
      del self.routes[srcip]


    # decide if send copies of announcement to neighboring routers
    for ip in self.sockets.keys():
      if not (ip == srcip):
        # get the .1 version of the ip i'm sending update to
        # ip i'm sending to is ip
        dest_ip_port = list(ip)
        dest_ip_port[len(ip) - 1] = '1'
        packet['src'] = ''.join(dest_ip_port)
        packet['dst'] = ip

        jsonpack = json.dumps(packet)
        # if receiving message from peer or provider then only send to customer
        if self.relations[srcip] == PEER or self.relations[srcip] == PROV:
          if self.relations[ip] == CUST:
            self.sockets[ip].sendall(jsonpack.encode())
        # if receiving from customer send to all neighbors
        else:
          self.sockets[ip].sendall(jsonpack.encode())

    return True

  def dump(self, packet):
    """ handles dump table requests """
    # TODO
    packet['type'] = "table"
    src = packet['src']
    packet['src'] = packet['dst']
    packet['dst'] = src

    table_list = []

    # TODO fill out table string with routing table
    table_string = ""
    # TODO asking for int indexes instead of string for route?
    for ip in self.routes:
      # TODO have to fill ip address of peer
      for route in self.routes[ip]:
        entry = {'network' : route[NTWK], 'netmask' : route[NMSK], 'peer' : ip}
        table_list.append(entry)

    packet[MESG] = table_list
    msg = json.dumps(packet)

    sock = self.sockets[src]
    sock.sendall(msg.encode())
    return True

  def handle_packet(self, srcip, packet):
    """ dispatches a packet """
    print(packet)
    type = packet['type']
    if type == 'update':
      self.update(srcip, packet)
    elif type == 'dump':
      self.dump(packet)
    elif type == 'data':
      # check if a route is in forwarding table
      # if so forward
      self.forward(srcip,packet)
      print("FOUND SOURCE IP IN ROUTES KEYS")
    elif type == 'revoke':
      self.revoke(packet)

    return True

  def send_error(self, conn, packet, neighbor_ip):
    """ Send a no_route error message """
    # dst ip becomes src ip to return the message
    # src ip becomes this ip
    # type becomes "no route"

    orig_ip = packet[SRCE]
    ip = neighbor_ip
    dest_ip_port = list(ip)
    dest_ip_port[len(ip) - 1] = '1'
    packet['src'] = ''.join(dest_ip_port)
    packet['dst'] = orig_ip

    print("FROM SEND ERROR HI")
    #
    # src = packet['src']
    # packet['src'] = packet['dst']
    # packet['dst'] = src



    packet['type'] = "no route"
    # msg is empty
    packet[MESG] = {}

    print("packet send error")
    print(packet)

    # send from port incoming...current dst ip?
    msg = json.dumps(packet)
    # sock = self.sockets[src]
    conn.sendall(msg.encode())

    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcip = sock
          msg = json.loads(k)
          if not self.handle_packet(srcip, msg):
            # TODO SEND ERROR GOES HERE
            return False;


        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('networks', type=str, nargs='+', help="networks")
  args = PARSER.parse_args()
  networks = args.networks
  router = Router(args.networks).run()   #custruct router object and call run method
